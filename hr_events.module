<?php
/**
 * @file
 * Code for the Events feature.
 */

include_once 'hr_events.features.inc';

/**
 * Implements hook_og_features_registry()
 */
function hr_events_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_events';
  $feature->name = t('Events');
  $feature->description = t('Provide events to your space.');
  $feature->components = array(
    'node' => array(
      'hr_event',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implements hook_og_features_toggle($entity, $entity_id, $entity_type, $features)
 */
function hr_events_og_features_toggle($entity, $entity_id, $entity_type, $features) {
  if (isset($features['hr_events'])) {
    $mlid = og_menu_single_get_link_mlid('node', $entity_id);
    if (empty($features['hr_events'])) {
      menu_link_delete(NULL, 'node/'.$entity_id.'/events');
    }
    else {
      // See if menu link already exists
      $menu_link = menu_link_get_preferred('node/'.$entity_id.'/events', OG_MENU_SINGLE_MENU_NAME);
      if (empty($menu_link)) {
        $menu_link = array(
          'link_path' => 'node/'.$entity_id.'/events',
          'link_title' => 'Events',
          'menu_name' => OG_MENU_SINGLE_MENU_NAME,
          'weight' => 4,
          'plid' => $mlid,
        );
        menu_link_save($menu_link);
      }
    }
  }

}


/**
 * Implements hook_views_query_alter()
 * Makes the clusters/sectors filter of the calendar work
 * Makes the calendar view available to disasters
 * Related issue: https://www.drupal.org/node/2291619
 */
function hr_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events_calendar') {
    $add_join = FALSE;
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Makes the calendar view available to disasters
        if ($condition['field'] == 'og_membership.gid = :og_membership_og_group_ref_target_id2 ' && $condition['operator'] == 'formula') {
          $nid = $condition['value'][':og_membership_og_group_ref_target_id2'];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $join = new views_join;
            $join->construct('field_data_field_disasters',
              'node',
              'nid',
              'entity_id'
            );
            $view->query->add_relationship('field_data_field_disasters', $join, 'node');
            $condition = array('field' => 'field_data_field_disasters.field_disasters_target_id', 'value' => $nid, 'operator' => '=');
            debug($condition);
          }
        }
        // If we are filtering the calendar by cluster/sector
        if ($condition['field'] == 'og_membership.gid' && $condition['operator'] == 'in') {
          $condition['field'] = 'og_membership2.gid';
          $add_join = TRUE;
        }
      }
    }
    // Then add a join to og_membership to the query
    if ($add_join) {
      $join = new views_join;
      $join->construct('og_membership',
          'node',  // left table
          'nid',   // left field
          'etid'   // field
      );
      $view->query->add_relationship('og_membership2',$join,'node');
    }
  }
}

/**
 * Implements hook_search_api_views_query_alter()
 *
 * Makes the events view available for disasters
 */
function hr_events_search_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (reset($condition) == 'og_group_ref') {
          $nid = $condition[1];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $condition = array('field_disasters', $nid, '=');
          }
        }
      }
    }
  }
}

